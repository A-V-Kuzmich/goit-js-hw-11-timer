{"version":3,"sources":["js/timer.js","index.js"],"names":["CountdownTimer","constructor","selector","targetDate","timerSelector","document","querySelector","timerDays","timerHours","timerMins","timerSecs","timerInterval","timerIsActive","pad","value","String","padStart","getTime","time","days","Math","floor","hours","mins","secs","timerStart","console","log","setInterval","timeDifference","Date","clearTimeout","setValue","textContent"],"mappings":";;;AAuEA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAvEgB,MAAMA,EACpBC,aAAY,SAACC,EAAD,WAAWC,IAChBA,KAAAA,WAAaA,EACbC,KAAAA,cAAgBC,SAASC,cAAcJ,GAEvCK,KAAAA,UAAY,KAAKH,cAAcE,cAAc,uBAC7CE,KAAAA,WAAa,KAAKJ,cAAcE,cAAc,wBAC9CG,KAAAA,UAAY,KAAKL,cAAcE,cAAc,uBAC7CI,KAAAA,UAAY,KAAKN,cAAcE,cAAc,uBAE7CK,KAAAA,cAAgB,KAChBC,KAAAA,eAAgB,EAGvBC,IAAIC,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnCC,QAAQC,GAsBD,MAAA,CAACC,KAlBG,KAAKN,IAAIO,KAAKC,MAAMH,EAAQ,QAkBzBI,MAZF,KAAKT,IAAIO,KAAKC,MAAOH,EAAQ,MAAyB,OAY7CK,KAPV,KAAKV,IAAIO,KAAKC,MAAOH,EAAQ,KAAoB,MAOjCM,KAFd,KAAKX,IAAIO,KAAKC,MAAOH,EAAQ,IAAc,OAIvDO,aACO,KAAKb,cACTc,QAAQC,IAAI,oBAGRf,KAAAA,eAAgB,EAChBD,KAAAA,cAAgBiB,YAAY,KACzBC,MAAAA,EAAiB,KAAK1B,WAAa,IAAI2B,KAE3CD,GAAAA,EAAiB,EAGnB,OAFAH,QAAQC,IAAI,wBACZI,aAAa,KAAKpB,eAGdqB,KAAAA,SAAS,KAAKf,QAAQY,KACzB,MAGLG,UAAS,KAACb,EAAD,MAAOG,EAAP,KAAcC,EAAd,KAAoBC,IACtBjB,KAAAA,UAAU0B,YAAcd,EACxBX,KAAAA,WAAWyB,YAAcX,EACzBb,KAAAA,UAAUwB,YAAcV,EACxBb,KAAAA,UAAUuB,YAAcT,GAOlC,QAAA,QAAA,EAJA,MAAMN,EAAO,IAAIlB,EAAe,CAC9BE,SAAU,WACVC,WAAY,IAAI2B,KAAK,kBAEvBZ,EAAKO;;ACtEL,aADA,QAAA,oBACA,QAAA","file":"src.3ddd2116.js","sourceRoot":"../src","sourcesContent":[" export default class CountdownTimer{\n  constructor({selector, targetDate}) {\n    this.targetDate = targetDate;\n    this.timerSelector = document.querySelector(selector);\n\n    this.timerDays = this.timerSelector.querySelector('[data-value=\"days\"]');\n    this.timerHours = this.timerSelector.querySelector('[data-value=\"hours\"]');\n    this.timerMins = this.timerSelector.querySelector('[data-value=\"mins\"]');\n    this.timerSecs = this.timerSelector.querySelector('[data-value=\"secs\"]');\n    \n    this.timerInterval = null;\n    this.timerIsActive = false; \n   };\n  //Добавляет ноль впереди, если число не двухзначное\n  pad(value) {\n    return String(value).padStart(2, '0');\n  };\n  //переводит в нужный формат\n  getTime(time) { /*\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n */\nconst days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n/*\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n * остатка % и делим его на количество миллисекунд в одном часе\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n */\nconst hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n/*\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n */\nconst mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n/*\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n * миллисекунд в одной секунде (1000)\n */\n  const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n  return {days, hours, mins, secs};};\n  //выводит значения в цикле\n   timerStart() {\n      if (this.timerIsActive) {\n      console.log('timer is active');\n      return\n     };\n     this.timerIsActive = true;\n     this.timerInterval = setInterval(() => {\n       const timeDifference = this.targetDate - new Date();\n       //const timeDifference = new Date() - this.targetDate; //для проверки \n     if (timeDifference < 0) {\n       console.log('timer is finish');\n       clearTimeout(this.timerInterval);\n       return\n     }; \n      this.setValue(this.getTime(timeDifference));\n     }, 1000);\n   };\n  //выводит значения на страницу\n   setValue({days, hours, mins, secs}) {\n     this.timerDays.textContent = days;\n     this.timerHours.textContent = hours;\n     this.timerMins.textContent = mins;\n     this.timerSecs.textContent = secs;\n   };\n};\nconst time = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Feb 13, 2022'),\n});\ntime.timerStart();","import './sass/main.scss';\nimport './js/timer.js';\n"]}